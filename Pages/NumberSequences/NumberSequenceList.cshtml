@page
@model Indotalent.Pages.NumberSequences.NumberSequenceListModel
@{
    Layout = "~/Pages/Shared/AdminLTE/_Admin.cshtml";
    ViewData["Module"] = "Settings";
}




<div class="row">
    <div class="col-12">
        <div id="Grid"></div>
    </div>
</div>

@section Scripts {
    <script>


        document.addEventListener('DOMContentLoaded', function () {

            var grid = new ej.grids.Grid({
                dataSource: new ej.data.DataManager({
                    url: '/odata/NumberSequence',
                    adaptor: new ej.data.ODataV4Adaptor()
                }),
                allowFiltering: true,
                allowSorting: true,
                allowGrouping: true,
                allowTextWrap: true,
                allowResizing: true,
                allowPaging: true,
                allowSelection: true,
                allowExcelExport: true,
                filterSettings: { type: 'CheckBox' },
                sortSettings: { columns: [{ field: 'CreatedAtUtc', direction: 'Descending' }] },
                pageSettings: { currentPage: 1, pageSize: 20, pageSizes: ["10", "20", "50", "100", "200", "All"] },
                selectionSettings: { persistSelection: true, type: 'Single' },
                autoFit: true,
                showColumnMenu: true,
                gridLines: 'Horizontal',
                columns: [
                    { type: 'checkbox', width: 100 },
                    {
                        field: 'Id', isPrimaryKey: true, headerText: 'Id', visible: false
                    },
                    { field: 'CreatedAtUtc', width: 100, format: 'yyyy-MM-dd HH:ss', textAlign: 'Left', type: 'dateTime' },
                    { field: 'EntityName', width: 100 },
                    { field: 'Prefix', width: 100 },
                    { field: 'Suffix', width: 100 },
                    { field: 'LastUsedCount', width: 100 },
                ],
                toolbar: [
                    'ExcelExport', 'Search',
                    { type: 'Separator' },
                    { text: 'Add', tooltipText: 'Add', prefixIcon: 'e-add', id: 'AddCustom' },
                    { text: 'Edit', tooltipText: 'Edit', prefixIcon: 'e-edit', id: 'EditCustom' },
                    { text: 'Delete', tooltipText: 'Delete', prefixIcon: 'e-delete', id: 'DeleteCustom' },
                ],
                beforeDataBound: () => {
                },
                dataBound: function () {
                    grid.toolbarModule.enableItems(['AddCustom', 'EditCustom', 'DeleteCustom'], false);
                    grid.autoFitColumns(['CreatedAtUtc', 'EntityName', 'Prefix', 'Suffix', 'LastUsedCount']);
                },
                excelExportComplete: () => {
                },
                rowSelected: () => {
                },
                rowDeselected: () => {
                },
                rowSelecting: () => {
                    if (grid.getSelectedRecords().length) {
                        grid.clearSelection();
                    }
                },
                toolbarClick: (args) => {
                    if (args.item.id === 'Grid_excelexport') {
                        grid.excelExport();
                    }
                },
                actionFailure: (args) => {
                    if (args.error) {

                        new ej.notifications.Toast({
                            title: "Error",
                            content: args?.error?.[0]?.error?.responseText || "An error occurred while performing the operation.",
                            cssClass: "e-toast-danger",
                            icon: 'e-error toast-icons',
                            position: { X: "Center", Y: "Bottom" }
                        }, '#SFToast').show();

                    }

                }
            });

            grid.appendTo('#Grid');

        });
    </script>
}