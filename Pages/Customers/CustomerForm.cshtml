@page "{rowGuid?}"
@using Indotalent.Models.Enums
@model Indotalent.Pages.Customers.CustomerFormModel
@{
    Layout = "~/Pages/Shared/AdminLTE/_Admin.cshtml";
    var statusMessage = Model.StatusMessage;
    Model.StatusMessage = string.Empty;
}

<div class="form-card">
    <form id="formMain" method="post" novalidate="">
        <input type="hidden" asp-for="@Model.CustomerForm.RowGuid" />
        <input type="hidden" asp-for="@Model.CustomerForm.Id" />
        <div class="form-card-body">

            <p class="small-italic-left">General</p>
            <fieldset>
                <div class="row">
                    <div class="col-md-12">
                        @if (!string.IsNullOrEmpty(Model.Number))
                        {
                            <h1>@Model.Number</h1>
                        }
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label asp-for="@Model.CustomerForm.Name" class="form-label"></label>
                            <input asp-for="@Model.CustomerForm.Name" />
                        </div>
                    </div>
                    <div class="col-md-6">
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            <label asp-for="@Model.CustomerForm.Description" class="form-label"></label>
                            <textarea asp-for="@Model.CustomerForm.Description" class="form-control" rows="6"></textarea>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label asp-for="@Model.CustomerForm.CustomerGroupId" class="form-label"></label>
                            <select asp-for="@Model.CustomerForm.CustomerGroupId" asp-items="@Model.CustomerGroupLookup" class="form-control">
                                <option value="">-- Select Group --</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label asp-for="@Model.CustomerForm.CustomerCategoryId" class="form-label"></label>
                            <select asp-for="@Model.CustomerForm.CustomerCategoryId" asp-items="@Model.CustomerCategoryLookup" class="form-control">
                                <option value="">-- Select Category --</option>
                            </select>
                        </div>
                    </div>
                </div>
            </fieldset>
            <p class="small-italic-left">Address</p>
            <fieldset>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label asp-for="@Model.CustomerForm.Street" class="form-label"></label>
                            <input asp-for="@Model.CustomerForm.Street" class="form-control" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label asp-for="@Model.CustomerForm.ZipCode" class="form-label"></label>
                            <input asp-for="@Model.CustomerForm.ZipCode" class="form-control" />
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label asp-for="@Model.CustomerForm.City" class="form-label"></label>
                            <input asp-for="@Model.CustomerForm.City" class="form-control" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label asp-for="@Model.CustomerForm.Country" class="form-label"></label>
                            <select asp-for="@Model.CustomerForm.Country" asp-items="@Model.CountryLookup" class="form-control">
                                <option value="">-- Select Country --</option>
                            </select>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label asp-for="@Model.CustomerForm.State" class="form-label"></label>
                            <input asp-for="@Model.CustomerForm.State" class="form-control" />
                        </div>
                    </div>
                    <div class="col-md-6">
                    </div>
                </div>
            </fieldset>


            <p class="small-italic-left">Communications</p>
            <fieldset>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label asp-for="@Model.CustomerForm.PhoneNumber" class="form-label"></label>
                            <input asp-for="@Model.CustomerForm.PhoneNumber" class="form-control" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label asp-for="@Model.CustomerForm.EmailAddress" class="form-label"></label>
                            <input asp-for="@Model.CustomerForm.EmailAddress" class="form-control" />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label asp-for="@Model.CustomerForm.FaxNumber" class="form-label"></label>
                            <input asp-for="@Model.CustomerForm.FaxNumber" class="form-control" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label asp-for="@Model.CustomerForm.Website" class="form-label"></label>
                            <input asp-for="@Model.CustomerForm.Website" class="form-control" />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label asp-for="@Model.CustomerForm.WhatsApp" class="form-label"></label>
                            <input asp-for="@Model.CustomerForm.WhatsApp" class="form-control" />
                        </div>
                    </div>
                    <div class="col-md-6">
                    </div>
                </div>
            </fieldset>


            <p class="small-italic-left">Social Media</p>
            <fieldset>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label asp-for="@Model.CustomerForm.LinkedIn" class="form-label"></label>
                            <input asp-for="@Model.CustomerForm.LinkedIn" class="form-control" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label asp-for="@Model.CustomerForm.Facebook" class="form-label"></label>
                            <input asp-for="@Model.CustomerForm.Facebook" class="form-control" />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label asp-for="@Model.CustomerForm.TwitterX" class="form-label"></label>
                            <input asp-for="@Model.CustomerForm.TwitterX" class="form-control" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label asp-for="@Model.CustomerForm.Instagram" class="form-label"></label>
                            <input asp-for="@Model.CustomerForm.Instagram" class="form-control" />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label asp-for="@Model.CustomerForm.TikTok" class="form-label"></label>
                            <input asp-for="@Model.CustomerForm.TikTok" class="form-control" />
                        </div>
                    </div>
                    <div class="col-md-6">
                    </div>
                </div>
            </fieldset>

        </div>
        <div class="form-card-footer">
            <button type="submit" id="btnSubmit" class="e-btn e-control @(Model.Action == "delete" ? "e-danger" : "")">@(Model.Action == "delete" ? "Delete" : "Submit")</button>
        </div>

    </form>


    @if (!string.IsNullOrEmpty(Model.Number))
    {
        <p class="small-italic-left">Contact</p>
        <fieldset>
            <div class="row">
                <div class="col-md-12">
                    <div id="Grid"></div>
                </div>
            </div>
        </fieldset>
    }

</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {

            

            showStatusMessage('@statusMessage');

            new ej.inputs.TextBox({}, '#CustomerForm_Name');
            new ej.inputs.TextBox({}, '#CustomerForm_Description');
            new ej.inputs.TextBox({}, '#CustomerForm_Street');
            new ej.inputs.TextBox({}, '#CustomerForm_City');
            new ej.inputs.TextBox({}, '#CustomerForm_State');
            new ej.inputs.TextBox({}, '#CustomerForm_ZipCode');
            new ej.dropdowns.DropDownList({ allowFiltering: true }, '#CustomerForm_CustomerGroupId');
            new ej.dropdowns.DropDownList({ allowFiltering: true }, '#CustomerForm_CustomerCategoryId');
            new ej.dropdowns.DropDownList({ allowFiltering: true }, '#CustomerForm_Country');
            new ej.inputs.TextBox({}, '#CustomerForm_PhoneNumber');
            new ej.inputs.TextBox({}, '#CustomerForm_FaxNumber');
            new ej.inputs.TextBox({}, '#CustomerForm_WhatsApp');
            new ej.inputs.TextBox({}, '#CustomerForm_EmailAddress');
            new ej.inputs.TextBox({}, '#CustomerForm_Website');
            new ej.inputs.TextBox({}, '#CustomerForm_LinkedIn');
            new ej.inputs.TextBox({}, '#CustomerForm_Facebook');
            new ej.inputs.TextBox({}, '#CustomerForm_TwitterX');
            new ej.inputs.TextBox({}, '#CustomerForm_Instagram');
            new ej.inputs.TextBox({}, '#CustomerForm_TikTok');
            new ej.buttons.Button({ isPrimary: true }, '#btnSubmit');

            var validationOptions = {
                rules: {
                    'CustomerForm.Name': { required: true },
                    'CustomerForm.CustomerGroupId': { required: true },
                    'CustomerForm.CustomerCategoryId': { required: true },
                }
            }

            var formValidator = new ej.inputs.FormValidator('#formMain', validationOptions);
            var formElement = document.getElementById('formMain');
            formElement.addEventListener('submit', function (e) {
                e.preventDefault();
                if (formValidator.validate()) {
                    formElement.submit();
                }
            })

        });
    </script>

    <script>

        var gridContainer = document.getElementById('Grid');
        if (gridContainer) {
            var grid = new ej.grids.Grid({
                dataSource: new ej.data.DataManager({
                    url: '/odata/CustomerContactChild',
                    adaptor: new ej.data.ODataV4Adaptor(),
                    headers: [
                        { ParentId: "@Model.CustomerForm.Id" }
                    ]
                }),
                editSettings: { allowEditing: true, allowAdding: true, allowDeleting: true, showDeleteConfirmDialog: true, mode: 'Normal' },
                allowFiltering: false,
                allowSorting: false,
                allowSelection: true,
                allowGrouping: false,
                allowTextWrap: true,
                allowResizing: false,
                allowPaging: false,
                allowExcelExport: true,
                filterSettings: { type: 'CheckBox' },
                selectionSettings: { persistSelection: true, type: 'Single' },
                autoFit: false,
                showColumnMenu: false,
                gridLines: 'Horizontal',
                columns: [
                    { type: 'checkbox', width: 100 },
                    { field: 'Id', isPrimaryKey: true, headerText: 'Id', visible: false },
                    { field: 'Name', width: 100, validationRules: { required: true } },
                    { field: 'Number', width: 100, allowEditing: false },
                    { field: 'JobTitle', width: 100 },
                    { field: 'PhoneNumber', width: 100 },
                    { field: 'EmailAddress', width: 100 },
                ],
                toolbar: [
                    'ExcelExport',
                    { type: 'Separator' },
                    'Add', 'Edit', 'Delete', 'Update', 'Cancel'
                ],
                beforeDataBound: () => {
                },
                dataBound: function () {
                },
                excelExportComplete: () => {
                },
                rowSelected: () => {
                },
                rowDeselected: () => {
                },
                rowSelecting: () => {
                    if (grid.getSelectedRecords().length) {
                        grid.clearSelection();
                    }
                },
                toolbarClick: (args) => {
                    if (args.item.id === 'Grid_excelexport') {
                        grid.excelExport();
                    }
                },
                actionComplete: (args) => {
                    
                    if (args.requestType === 'save' || args.requestType === 'delete') {

                        let message = 'Delete Process Success';

                        switch (args.action) {
                            case 'add':
                                message = 'Add Process Success';
                                break;
                            case 'edit':
                                message = 'Edit Process Success';
                                break;
                            default:
                                break;
                        }

                        new ej.notifications.Toast({
                            content: message,
                            cssClass: "e-toast-success",
                            icon: 'e-success toast-icons',
                            position: { X: "Center", Y: "Bottom" }
                        }, '#SFToast').show();
                    }
                }
            });


            grid.appendTo('#Grid');
        } 

    </script>

}
