@page "{rowGuid?}"
@using Indotalent.Models.Enums
@using System.Text.Json
@using System.Text.Json.Serialization
@model Indotalent.Pages.PositiveAdjustments.PositiveAdjustmentFormModel
@{
    Layout = "~/Pages/Shared/AdminLTE/_Admin.cshtml";
    var statusMessage = Model.StatusMessage;
    Model.StatusMessage = string.Empty;

    var productLookupJson = JsonSerializer.Serialize(Model.ProductLookup);
    var warehouseLookupJson = JsonSerializer.Serialize(Model.WarehouseLookup);
}

<div class="form-card">
    <form id="formMain" method="post" novalidate="">
        <input type="hidden" asp-for="@Model.AdjustmentPlusForm.RowGuid" />
        <input type="hidden" asp-for="@Model.AdjustmentPlusForm.Id" />
        <div class="form-card-body">

            <p class="small-italic-left">General</p>
            <fieldset>
                <div class="row">
                    <div class="col-md-12">
                        @if (!string.IsNullOrEmpty(Model.Number))
                        {
                            <h1>@Model.Number</h1>
                        }
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label asp-for="@Model.AdjustmentPlusForm.AdjustmentDate" class="form-label"></label>
                            <input asp-for="@Model.AdjustmentPlusForm.AdjustmentDate" class="form-control" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label asp-for="@Model.AdjustmentPlusForm.Status" class="form-label"></label>
                            <select asp-for="@Model.AdjustmentPlusForm.Status" asp-items="Html.GetEnumSelectList<AdjustmentStatus>()" class="form-control">
                                <option value="">-- Select Status --</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            <label asp-for="@Model.AdjustmentPlusForm.Description" class="form-label"></label>
                            <textarea asp-for="@Model.AdjustmentPlusForm.Description" class="form-control" rows="6"></textarea>
                        </div>
                    </div>
                </div>
            </fieldset>


        </div>
        <div class="form-card-footer">
            <button type="submit" id="btnSubmit" class="e-btn e-control @(Model.Action == "delete" ? "e-danger" : "")">@(Model.Action == "delete" ? "Delete" : "Submit")</button>
        </div>

    </form>


    @if (!string.IsNullOrEmpty(Model.Number))
    {
        <p class="small-italic-left">Adjusted Items</p>
        <fieldset class="mb-5">
            <div class="row">
                <div class="col-md-12">
                    <div id="Grid"></div>
                </div>
            </div>
        </fieldset>
    }

</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {

            

            showStatusMessage('@statusMessage');

            new ej.inputs.TextBox({}, '#AdjustmentPlusForm_Description');
            new ej.dropdowns.DropDownList({}, '#AdjustmentPlusForm_Status');
            new ej.calendars.DateTimePicker({}, '#AdjustmentPlusForm_AdjustmentDate');
            new ej.buttons.Button({ isPrimary: true }, '#btnSubmit');

            var validationOptions = {
                rules: {
                    'AdjustmentPlusForm.AdjustmentDate': { required: true },
                    'AdjustmentPlusForm.Status': { required: true },
                }
            }

            var formValidator = new ej.inputs.FormValidator('#formMain', validationOptions);
            var formElement = document.getElementById('formMain');
            formElement.addEventListener('submit', function (e) {
                e.preventDefault();
                if (formValidator.validate()) {
                    formElement.submit();
                }
            })

        });
    </script>

    <script>

        var products = @Html.Raw(productLookupJson);
        var productLookup = {};
        products.forEach(function (product) {
            productLookup[product.ProductId] = product.ProductName;
        });


        var warehouses = @Html.Raw(warehouseLookupJson);
        var warehouseLookup = {};
        warehouses.forEach(function (warehouse) {
            warehouseLookup[warehouse.WarehouseId] = warehouse.WarehouseName;
        });


        var gridContainer = document.getElementById('Grid');
        if (gridContainer) {
            var grid = new ej.grids.Grid({
                dataSource: new ej.data.DataManager({
                    url: '/odata/AdjustmentPlusItemChild',
                    adaptor: new ej.data.ODataV4Adaptor(),
                    headers: [
                        { ParentId: "@Model.AdjustmentPlusForm.Id" }
                    ]
                }),
                editSettings: { allowEditing: true, allowAdding: true, allowDeleting: true, showDeleteConfirmDialog: true, mode: 'Normal' },
                allowFiltering: false,
                allowSorting: false,
                allowSelection: true,
                allowGrouping: false,
                allowTextWrap: true,
                allowResizing: false,
                allowPaging: false,
                allowExcelExport: true,
                filterSettings: { type: 'CheckBox' },
                selectionSettings: { persistSelection: true, type: 'Single' },
                autoFit: false,
                showColumnMenu: false,
                gridLines: 'Horizontal',
                columns: [
                    { type: 'checkbox', width: 50 },
                    { field: 'Id', isPrimaryKey: true, headerText: 'Id', visible: false },
                    {
                        field: 'WarehouseId',
                        headerText: 'Warehouse',
                        width: 200,
                        validationRules: { required: true },
                        disableHtmlEncode: false,
                        valueAccessor: (field, data, column) => {
                            return warehouseLookup[data[field]];
                        },
                        editType: 'dropdownedit',
                        edit: {
                            create: () => {
                                warehouseElem = document.createElement('input');
                                return warehouseElem;
                            },
                            read: () => {
                                return warehouseObj.value;
                            },
                            destroy: function () {
                                warehouseObj.destroy();
                            },
                            write: function (args) {
                                warehouseObj = new ej.dropdowns.DropDownList({
                                    dataSource: @Html.Raw(warehouseLookupJson),
                                    fields: { value: 'WarehouseId', text: 'WarehouseName' },
                                    placeholder: 'Select a Warehouse',
                                    floatLabelType: 'Never'
                                });
                                warehouseObj.value = args.rowData.WarehouseId;
                                warehouseObj.appendTo(warehouseElem);
                            }
                        },
                    },
                    {
                        field: 'ProductId',
                        headerText: 'Product',
                        width: 200,
                        validationRules: { required: true },
                        disableHtmlEncode: false,
                        valueAccessor: (field, data, column) => {
                            return productLookup[data[field]];
                        },
                        editType: 'dropdownedit',
                        edit: {
                            create: () => {
                                productElem = document.createElement('input');
                                return productElem;
                            },
                            read: () => {
                                return productObj.value;
                            },
                            destroy: function () {
                                productObj.destroy();
                            },
                            write: function (args) {
                                productObj = new ej.dropdowns.DropDownList({
                                    dataSource: @Html.Raw(productLookupJson),
                                    fields: { value: 'ProductId', text: 'ProductName' },
                                    placeholder: 'Select a Product',
                                    floatLabelType: 'Never'
                                });
                                productObj.value = args.rowData.ProductId;
                                productObj.appendTo(productElem);
                            }
                        },
                    },
                    {
                        field: 'Movement', width: 100,
                        validationRules: {
                            required: true,
                            custom: [(args) => {
                                return args['value'] > 0;
                            }, 'Must be a positive number and not zero']
                        },
                        type: 'number', format: 'N2', textAlign: 'Right', defaultValue: '1'
                    },
                ],
                toolbar: [
                    'ExcelExport',
                    { type: 'Separator' },
                    'Add', 'Edit', 'Delete', 'Update', 'Cancel',
                    { type: 'Separator' },
                    { text: 'Download Pdf', tooltipText: 'Download Pdf', prefixIcon: 'e-export-pdf', id: 'PdfCustom' },
                ],
                beforeDataBound: () => {
                },
                dataBound: function () {
                },
                excelExportComplete: () => {
                },
                rowSelected: () => {
                },
                rowDeselected: () => {
                },
                rowSelecting: () => {
                    if (grid.getSelectedRecords().length) {
                        grid.clearSelection();
                    }
                },
                toolbarClick: (args) => {
                    if (args.item.id === 'Grid_excelexport') {
                        grid.excelExport();
                    }

                    if (args.item.id === 'PdfCustom') {
                        var formUrl = '/PositiveAdjustments/PositiveAdjustmentDownload?id=' + '@Model.AdjustmentPlusForm.Id';
                        window.location.href = formUrl;
                    }
                },
                actionComplete: (args) => {

                    if (args.requestType === 'save' || args.requestType === 'delete') {

                        let message = 'Delete Process Success';
                        switch (args.action) {
                            case 'add':
                                message = 'Add Process Success';
                                break;
                            case 'edit':
                                message = 'Edit Process Success';
                                break;
                            default:
                                break;
                        }

                        new ej.notifications.Toast({
                            content: message,
                            cssClass: "e-toast-success",
                            icon: 'e-success toast-icons',
                            position: { X: "Center", Y: "Bottom" }
                        }, '#SFToast').show();


                    }
                }
            });


            grid.appendTo('#Grid');
        }

    </script>

}
